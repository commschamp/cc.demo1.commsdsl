name: Github Actions Build

on: [push]

jobs:
  build_gcc_ubuntu_18_04:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [4.8, 5, 6, 7]
        cpp: [11, 14]
        comms_tag: [master]

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libqt5gui5 qtbase5-dev libboost-all-dev libxml2-dev gcc-${{matrix.cc_ver}} g++-${{matrix.cc_ver}} gcc-8 g++-8

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b ${{comms_tag}} https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1       

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCOMMSDSL_C_COMPILER=gcc-8 -DCOMMSDSL_CXX_COMPILER=g++-8 -DCOMMS_INSTALL_DIR=${{runner.workspace}}/externals/comms/build/install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Generate Target Projects
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 
        
    - name: Create Target Protocol Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output
      
    - name: Configure Target Protocol Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output
      run: cmake ${{runner.workspace}}/build/output -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold 
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Protocol Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

    - name: Create Target Test Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output_test
      
    - name: Configure Target Test Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output_test
      run: cmake ${{runner.workspace}}/build/output_test -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install;${{runner.workspace}}/build/build.output/install"
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Test Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 


  build_gcc_ubuntu_20_04:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [8, 9, 10, 11]
        cpp: [11, 14, 17, 20]
        comms_tag: [master]
        exclude:
          - cc_ver: 8
            cpp: 20

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libqt5gui5 qtbase5-dev libboost-all-dev libxml2-dev gcc-${{matrix.cc_ver}} g++-${{matrix.cc_ver}}

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b ${{comms_tag}} https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1       

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMS_INSTALL_DIR=${{runner.workspace}}/externals/comms/build/install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Generate Target Projects
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

    - name: Create Target Protocol Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output

    - name: Configure Target Protocol Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output
      run: cmake ${{runner.workspace}}/build/output -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Protocol Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

    - name: Create Target Test Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output_test
      
    - name: Configure Target Test Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output_test
      run: cmake ${{runner.workspace}}/build/output_test -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install;${{runner.workspace}}/build/build.output/install"
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Test Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 
      
  build_clang_ubuntu_18_04:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: ["4.0", "5.0", "6.0"]
        cpp: [11, 14, 17]
        comms_tag: [master]
        exclude:
          - cc_ver: "4.0"
            cpp: 17


    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libqt5gui5 qtbase5-dev libboost-all-dev libxml2-dev clang-${{matrix.cc_ver}} clang-6.0

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals      

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b ${{comms_tag}} https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMSDSL_C_COMPILER=clang-6.0 -DCOMMSDSL_CXX_COMPILER=clang++-6.0 -DCOMMS_INSTALL_DIR=${{runner.workspace}}/externals/comms/build/install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Generate Target Projects
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

    - name: Create Target Protocol Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output

    - name: Configure Target Protocol Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output
      run: cmake ${{runner.workspace}}/build/output -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DOPT_BUILD_TEST=ON -DOPT_BUILD_PLUGIN=ON
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build Target Protocol Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

    - name: Create Target Test Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output_test
      
    - name: Configure Target Test Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output_test
      run: cmake ${{runner.workspace}}/build/output_test -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install;${{runner.workspace}}/build/build.output/install"
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Test Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

  build_clang_ubuntu_20_04:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        type: [Debug, Release, MinSizeRel]
        cc_ver: [7, 8, 9, 10, 11, 12]
        cpp: [11, 14, 17, 20]
        comms_tag: [master]
        exclude:
          - cc_ver: 7
            cpp: 20
          - cc_ver: 8
            cpp: 20

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Install
      run: sudo apt-get update --fix-missing    
      
    - name: Install Packages
      run: sudo apt install libqt5gui5 qtbase5-dev libboost-all-dev libxml2-dev clang-${{matrix.cc_ver}}

    - name: Create Externals directory
      run: cmake -E make_directory ${{runner.workspace}}/externals        

    - name: Clone COMMS library
      working-directory: ${{runner.workspace}}/externals 
      run: git clone -b ${{comms_tag}} https://github.com/commschamp/comms

    - name: Create COMMS build directory
      run: cmake -E make_directory ${{runner.workspace}}/externals/comms/build  

    - name: Configure COMMS library
      shell: bash
      working-directory: ${{runner.workspace}}/externals/comms/build 
      run: cmake ${{runner.workspace}}/externals/comms -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install -DCOMMS_INSTALL_DIR=${{runner.workspace}}/externals/comms/build/install
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build COMMS library
      working-directory: ${{runner.workspace}}/externals/comms/build
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1       

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_INSTALL_PREFIX=install 
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Generate Target Projects
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . 
      env:
        VERBOSE: 1 

    - name: Create Target Protocol Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output

    - name: Configure Target Protocol Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output
      run: cmake ${{runner.workspace}}/build/output -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install 
      env:
        CC: clang-${{matrix.cc_ver}}
        CXX: clang++-${{matrix.cc_ver}}

    - name: Build Target Protocol Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 

    - name: Create Target Test Project Build Directory
      run: cmake -E make_directory ${{runner.workspace}}/build/build.output_test
      
    - name: Configure Target Test Project
      shell: bash
      working-directory: ${{runner.workspace}}/build/build.output_test
      run: cmake ${{runner.workspace}}/build/output_test -DCMAKE_BUILD_TYPE=${{matrix.type}} -DCMAKE_CXX_STANDARD=${{matrix.cpp}} -DCMAKE_INSTALL_PREFIX=install -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DCMAKE_PREFIX_PATH="${{runner.workspace}}/externals/comms/build/install;${{runner.workspace}}/build/build.output/install"
      env:
        CC: gcc-${{matrix.cc_ver}}
        CXX: g++-${{matrix.cc_ver}}

    - name: Build Target Test Project
      working-directory: ${{runner.workspace}}/build/build.output
      shell: bash
      run: cmake --build . --target install
      env:
        VERBOSE: 1 
          
